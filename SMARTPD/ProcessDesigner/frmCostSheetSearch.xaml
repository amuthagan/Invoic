<UserControl x:Class="ProcessDesigner.frmCostSheetSearch"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
         xmlns:Lookup="clr-namespace:ProcessDesigner.UserControls;assembly=ProcessDesigner.UserControls"  
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:UICommon="clr-namespace:ProcessDesigner.UICommon" 
        Height="600" Width="1024" Loaded="Window_Loaded" >
    <Grid>
        <Border>
            <Grid Height="600" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                    <RowDefinition Height="21*"></RowDefinition>
                    <RowDefinition Height="75*" ></RowDefinition>
                </Grid.RowDefinitions>
                <GroupBox  Grid.Row="0" Header="Search Cost Sheet" Margin="5,5,5,5">
                    <Grid>
                        <Grid.ColumnDefinitions >
                            <ColumnDefinition Width="10*" ></ColumnDefinition>
                            <ColumnDefinition Width="20*"></ColumnDefinition>
                            <ColumnDefinition Width="10*" ></ColumnDefinition>
                            <ColumnDefinition Width="20*"></ColumnDefinition>
                            <ColumnDefinition Width="40*" ></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition ></RowDefinition>
                            <RowDefinition ></RowDefinition>
                            <RowDefinition ></RowDefinition>
                        </Grid.RowDefinitions>
                        <TextBlock  Text="Product Desc : " Grid.Row="0"  Grid.Column="0" TextAlignment="Right"></TextBlock>
                        <TextBox Name="txtProductDesc"   Height="25" Grid.Row="0"  Grid.Column="1" Tag="Please enter Product Description"  Text="{Binding CostSheetSearch.PROD_DESC,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged }" ></TextBox>
                        <TextBlock  Text="Cust Dwg No : " Grid.Row="0"  Grid.Column="2" TextAlignment="Right"></TextBlock>
                        <!--<TextBox Name="txtCustDwgNo"  Height="25" Grid.Row="0"  Grid.Column="3" ToolTip="Enter Customer Drawing Number" Tag="CUST_DWG_NO"  Text="{Binding CostSheetSearch.CUST_DWG_NO,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged }"></TextBox>-->
                        <Lookup:ComboBoxWithSearch Grid.Row="0" Grid.Column="3" Tag="Please enter/select Cust. Dwg No."  x:Name="cmbCustDwgNo" Height="25"
			                DataSource="{Binding CostSheetSearch.CustDwgNo,UpdateSourceTrigger=PropertyChanged,NotifyOnValidationError=True, ValidatesOnDataErrors=True}" 
                            SelectedItem="{Binding SelectedCustDwg,UpdateSourceTrigger=PropertyChanged}" DisplayValuePath="CUST_DWG_NO" VerticalContentAlignment="Center"
                            SelectedText="{Binding CostSheetSearch.CUST_DWG_NO,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"
                            SelectedValuePath="CUST_DWG_NO" SelectedValue="{Binding CostSheetSearch.CUST_DWG_NO,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" 
                            ColumnsHeader="{Binding DropDownItemsCustDwg,UpdateSourceTrigger=PropertyChanged}" >
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="SelectedItemChanged">
                                    <i:InvokeCommandAction Command="{Binding SelectChangeComboCommandCust,UpdateSourceTrigger=PropertyChanged}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Lookup:ComboBoxWithSearch>
                        <TextBlock  Text="Customer Name : " Grid.Row="1"  Grid.Column="0" TextAlignment="Right"></TextBlock>
                        <!--<TextBox Name="txtCustomerName"  Height="25" Grid.Row="1"  Grid.Column="1" ToolTip="Enter Customer Name" Tag="CUST_NAME"  Text="{Binding CostSheetSearch.CUST_NAME ,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"></TextBox>-->
                        <Lookup:ComboBoxWithSearch MaxLength="40"  Grid.Row="1" Grid.Column="1" Tag="Please enter/select Customer Name"  x:Name="cmbCustomerName" Height="25"
			                DataSource="{Binding CostSheetSearch.CustName,UpdateSourceTrigger=PropertyChanged,NotifyOnValidationError=True, ValidatesOnDataErrors=True}" 
                            SelectedItem="{Binding SelectedCustName,UpdateSourceTrigger=PropertyChanged}" DisplayValuePath="CUST_NAME" VerticalContentAlignment="Center"
                            SelectedText="{Binding CostSheetSearch.CUST_NAME,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}"
                            SelectedValuePath="CUST_NAME" SelectedValue="{Binding CostSheetSearch.CUST_NAME,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}" 
                            ColumnsHeader="{Binding DropDownItemsCust,UpdateSourceTrigger=PropertyChanged}" >
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="SelectedItemChanged">
                                    <i:InvokeCommandAction Command="{Binding SelectChangeComboCommandCust,UpdateSourceTrigger=PropertyChanged}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Lookup:ComboBoxWithSearch>
                        <TextBlock  Text="Part No : " Grid.Row="1"  Grid.Column="2" TextAlignment="Right"></TextBlock>

                        <Lookup:ComboBoxCus MaxLength="{Binding ComboBoxMaxLength}" Width="160" HorizontalAlignment="Left" Tag="Please enter/select Part No." ColumnsHeader="{Binding Columns}" Grid.Column="3" Grid.Row="1" ButtonVisibility="{Binding ButtonEnable}" Margin="0,0" ToolTip="Select Part Number."
					     DataSource="{Binding DVCostSheetSearch,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  SelectedItem="{Binding SelectedRow}"  SelectedValuePath="PART_NO" SelectedValue="{Binding CostSheetSearch.PART_NO,UpdateSourceTrigger=PropertyChanged}" >
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="SelectedItemChanged">
                                    <i:InvokeCommandAction Command="{Binding SelectChangeComboCommand}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </Lookup:ComboBoxCus>


                        <StackPanel Grid.Row="2" Grid.ColumnSpan="5"  Orientation="Horizontal" Width="800">
                            <CheckBox Name="chkShowDomesticOnly"  IsChecked="{Binding CostSheetSearch.ChkShowDomesticOnly, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  Width="150" >
                                Show Domestic Only
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Checked">
                                        <i:InvokeCommandAction Command="{Binding OnCheckChangeCommandShowDomesticOnly}" 
                                                           CommandParameter="{Binding}"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="Unchecked">
                                        <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}},Path=DataContext.OnUnCheckChangeCommandShowDomesticOnly}" 
                                                           CommandParameter="{Binding}"/>
                                    </i:EventTrigger>
                                    <!--<i:EventTrigger EventName="Unchecked">
                                        <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}},Path=DataContext.OnCheckChangeCommandShowExpertOnly}" 
                                                           CommandParameter="{Binding}"/>
                                    </i:EventTrigger>-->
                                </i:Interaction.Triggers>
                            </CheckBox>

                            <CheckBox Name="chkShowExpertOnly" IsChecked="{Binding CostSheetSearch.ChkShowExpertOnly, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  Width="150" >
                                Show Export Only
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Checked">
                                        <i:InvokeCommandAction Command="{Binding OnCheckChangeCommandShowExpertOnly}" 
                                                           CommandParameter="{Binding}"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="Unchecked">
                                        <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}},Path=DataContext.OnUnCheckChangeCommandShowExpertOnly}" 
                                                           CommandParameter="{Binding}"/>
                                    </i:EventTrigger>

                                    <!--<i:EventTrigger EventName="Unchecked">
                                        <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}},Path=DataContext.OnCheckChangeCommandShowDomesticOnly}" 
                                                           CommandParameter="{Binding}"/>
                                    </i:EventTrigger>-->
                                </i:Interaction.Triggers>
                            </CheckBox>
                            <CheckBox Name="chkPendingPartNoAllocation" IsChecked="{Binding CostSheetSearch.ChkPendingPartNoAllocation, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  Width="200" >
                                Pending Part No Allocation
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Checked">
                                        <i:InvokeCommandAction Command="{Binding OnCheckChangeCommandPendingPartNoAllocation}" 
                                                           CommandParameter="{Binding}"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="Unchecked">
                                        <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}},Path=DataContext.OnUnCheckChangeCommandPendingPartNoAllocation}" 
                                                           CommandParameter="{Binding}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                            <CheckBox Name="chkShowPending" IsChecked="{Binding CostSheetSearch.ChkShowPending, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  Width="150" >
                                Show Pending
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Checked">
                                        <i:InvokeCommandAction Command="{Binding OnCheckChangeCommandShowPending}" 
                                                           CommandParameter="{Binding}"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="Unchecked">
                                        <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}},Path=DataContext.OnUnCheckChangeCommandShowPending}" 
                                                           CommandParameter="{Binding}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                            <CheckBox Name="chkShowAll" IsChecked="{Binding CostSheetSearch.ChkShowAll, Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"  Width="150" >
                                Show All
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Checked">
                                        <i:InvokeCommandAction Command="{Binding OnCheckChangeCommandShowAll}" 
                                                           CommandParameter="{Binding}"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="Unchecked">
                                        <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}},Path=DataContext.OnUnCheckChangeCommandShowAll}" 
                                                           CommandParameter="{Binding}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </CheckBox>
                            <!--<CheckBox Name="chkShowDomesticOnly"   Content ="Show Domestic Only" VerticalAlignment="Center" Width="150" IsChecked="{Binding CostSheetSearch.ChkShowDomesticOnly}"></CheckBox>-->
                            <!--<CheckBox Name="chkShowExpertOnly"   Content ="Show Expert Only" VerticalAlignment="Center" Width="150" IsChecked="{Binding CostSheetSearch.ChkShowExpertOnly}" ></CheckBox>-->
                            <!--<CheckBox Name="chkPendingPartNoAllocation"   Content ="Pending Part No Allocation" VerticalAlignment="Center" Width="200" IsChecked="{Binding CostSheetSearch.ChkPendingPartNoAllocation}"></CheckBox>-->
                            <!--<CheckBox Name="chkShowPending"   Content ="Show Pending" VerticalAlignment="Center" Width="150" IsChecked="{Binding CostSheetSearch.ChkShowPending}"></CheckBox>-->
                            <!--<CheckBox Name="chkShowAll"   Content ="Show All" VerticalAlignment="Center" Width="150" IsChecked="{Binding CostSheetSearch.ChkShowAll}"></CheckBox>-->
                        </StackPanel>
                        <StackPanel Grid.Row="0" Grid.Column="4" Grid.RowSpan="2"  Orientation="Horizontal" HorizontalAlignment="Center">
                            <Button Name="btnRefresh" Content="_Refresh" Height="50"  Width="100" KeyboardNavigation.IsTabStop="False" Command="{Binding OnSearchCommand}" Lookup:AddedProperty.Image="Images/Refresh.png"  ToolTip="Refresh Cost Sheet Search List" ></Button>
                            <Button Name="btnPrint" Content="_Print" Height="50"  Width="100" KeyboardNavigation.IsTabStop="False" Command="{Binding OnPrintCommand}" Lookup:AddedProperty.Image="Images/Print.png" IsEnabled="{Binding PrintEnabled}" ToolTip="Print Cost Sheet Search List"></Button>
                            <Button Name="btnClose" Content="_Close" Height="50"  Width="100" KeyboardNavigation.IsTabStop="False" Command="{Binding OnCloseCommand}" Lookup:AddedProperty.Image="Images/Close.png" ToolTip="Close"></Button>
                        </StackPanel>
                    </Grid>
                </GroupBox>
                <GroupBox Grid.Row="1" Margin="5,5,5,5" Header="{Binding CostSheetCount,UpdateSourceTrigger=PropertyChanged}">
                    <DataGrid RowHeaderWidth="20" Margin="0,0,2,2" CanUserSortColumns="True" AutoGenerateColumns="False"  Name="dgvCostSheetSearchMast" Grid.Column="0" Grid.Row="1" ItemsSource="{Binding CostSheetSearch.CostSheetSearchMasterDetails}"  CanUserAddRows="False" SelectedItem="{Binding SelectedCostSheet}" CanUserDeleteRows="False" UICommon:ScrollToTopBehavior.ScrollToTop="True" >
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseDoubleClick">
                                <i:InvokeCommandAction Command="{Binding ModifyCommand}" CommandParameter="{Binding ElementName=dgvCostSheetSearchMast, Path=SelectedItem}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="CI Reference" Width="*"  Binding="{Binding  CI_REFERENCE,TargetNullValue=1}" IsReadOnly="True">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="VerticalAlignment" Value="Center" />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                            <!--<DataGridTextColumn Header="CI Refrence" Binding="{Binding CI_REFERENCE,TargetNullValue=1}" Width="100" IsReadOnly="True"  ></DataGridTextColumn>-->
                            <DataGridTextColumn Header="Product Description" Width="*"  Binding="{Binding  PROD_DESC}" IsReadOnly="True">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="VerticalAlignment" Value="Center" />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                            <!--<DataGridTextColumn Header="Product Desc" Binding="{Binding PROD_DESC}" Width="250" IsReadOnly="True"></DataGridTextColumn>-->
                            <DataGridTextColumn Header="Customer Name" Width="*"  Binding="{Binding  CUST_NAME}" IsReadOnly="True">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="VerticalAlignment" Value="Center" />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                            <!--<DataGridTextColumn Header="Customer Name" Binding="{Binding CUST_NAME}" Width="150" IsReadOnly="True"></DataGridTextColumn>-->
                            <DataGridTextColumn Header="Part No" Width="*"  Binding="{Binding  PART_NO}" IsReadOnly="True">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="VerticalAlignment" Value="Center" />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                            <!--<DataGridTextColumn Header="Part No"  Binding="{Binding PART_NO}" Width="100" IsReadOnly="True"></DataGridTextColumn>-->
                            <DataGridTextColumn Header="Cust Dwg No" Width="*"  Binding="{Binding  CUST_DWG_NO}" IsReadOnly="True">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="VerticalAlignment" Value="Center" />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                            <!--<DataGridTextColumn Header="Cust Dwg No" Binding="{Binding CUST_DWG_NO}" Width="100" IsReadOnly="True"></DataGridTextColumn>-->
                            <DataGridTextColumn Header="Responsibility" Width="*"  Binding="{Binding  RESPONSIBILITY}" IsReadOnly="True">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="VerticalAlignment" Value="Center" />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                            <!--<DataGridTextColumn Header="Resp"  Binding="{Binding RESPONSIBILITY}" Width="100" IsReadOnly="True"></DataGridTextColumn>-->
                            <DataGridTextColumn Header="Location" Width="*"  Binding="{Binding  LOCATION}" IsReadOnly="True">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="VerticalAlignment" Value="Center" />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                            <!--<DataGridTextColumn Header="Location"  Binding="{Binding LOCATION}" Width="150" IsReadOnly="True"></DataGridTextColumn>-->
                        </DataGrid.Columns>
                        <DataGrid.ContextMenu>
                            <ContextMenu>
                                <!--<MenuItem Header="Delete" Command="{Binding DeleteOperationClickCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContextMenu}}, Path=PlacementTarget.SelectedItem}" />-->
                                <MenuItem Header="Refresh" Command="{Binding OnSearchCommand}"  />
                                <MenuItem Header="Copy Data" Command="{Binding CopyDataCommand}"  />
                                <MenuItem Header="Allot Part No" Command="{Binding AllotPartNoCommand}"  />
                                <MenuItem Header="Mark as Submitted" Command="{Binding MarkAsSubmittedCommand}"  />
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                    </DataGrid>
                </GroupBox>
            </Grid>
        </Border>
    </Grid>
</UserControl>
